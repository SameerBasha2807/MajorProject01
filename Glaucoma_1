{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12782274,"sourceType":"datasetVersion","datasetId":8081235}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, models\nfrom PIL import Image\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\nimport glob\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nDATA_DIR = \"/kaggle/input/glaucoma-dataset/ACRIMA\"\nPARTITIONED_DIR = os.path.join(DATA_DIR, \"PARTITIONED\")\nTRAIN_DIR = os.path.join(PARTITIONED_DIR, \"Training\")\nTEST_DIR = os.path.join(PARTITIONED_DIR, \"Testing\")\n\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nBATCH_SIZE = 20\nLEARNING_RATE = 1e-4\nNUM_EPOCHS = 20\nIMAGE_SIZE = 224\n\nclass GlaucomaDataset(Dataset):\n    def __init__(self, root_dir, transform=None):\n        self.root_dir = root_dir\n        self.transform = transform\n        self.classes = [\"glaucoma\", \"normal\"]\n        self.image_paths = []\n        self.labels = []\n\n        image_extensions = (\".jpg\", \".jpeg\", \".png\", \".bmp\", \".gif\")\n\n        for class_name in self.classes:\n            class_path = os.path.join(self.root_dir, class_name)\n            for img_path in glob.glob(os.path.join(class_path, \"*\")):\n                if img_path.lower().endswith(image_extensions):\n                    self.image_paths.append(img_path)\n                    self.labels.append(self.classes.index(class_name))\n        \n        if not self.image_paths:\n            print(f\"Warning: No images found in {root_dir} with extensions {image_extensions}.\")\n\n    def __len__(self):\n        return len(self.image_paths)\n\n    def __getitem__(self, idx):\n        img_path = self.image_paths[idx]\n        image = Image.open(img_path).convert(\"RGB\")\n        label = self.labels[idx]\n\n        if self.transform:\n            image = self.transform(image)\n\n        return image, label\n\ndata_transforms = {\n    \"train\": transforms.Compose([\n        transforms.Resize(IMAGE_SIZE),\n        transforms.CenterCrop(IMAGE_SIZE),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ]),\n    \"val\": transforms.Compose([\n        transforms.Resize(IMAGE_SIZE),\n        transforms.CenterCrop(IMAGE_SIZE),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n}\n\ndef get_model():\n    model = models.vit_b_16(pretrained=True)\n    \n    for param in model.parameters():\n        param.requires_grad = False\n\n    in_features = model.heads.head.in_features\n    model.heads.head = nn.Linear(in_features, 2)\n    \n    print(\"Using Vision Transformer (ViT) model: ViT-B/16\")\n    \n    return model\n\ndef train_model(model, train_loader, criterion, optimizer, num_epochs):\n    model.train()\n    print(\"Starting training...\")\n    for epoch in range(num_epochs):\n        running_loss = 0.0\n        for i, (images, labels) in enumerate(train_loader):\n            images = images.to(DEVICE)\n            labels = labels.to(DEVICE)\n\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item() * images.size(0)\n\n        epoch_loss = running_loss / len(train_loader.dataset)\n        print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}\")\n    print(\"Training finished.\")\n\ndef evaluate_model(model, test_loader):\n    model.eval()\n    print(\"Evaluating model...\")\n    all_preds = []\n    all_labels = []\n\n    with torch.no_grad():\n        for images, labels in test_loader:\n            images = images.to(DEVICE)\n            labels = labels.to(DEVICE)\n            outputs = model(images)\n            _, predicted = torch.max(outputs.data, 1)\n            \n            all_preds.extend(predicted.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n\n    accuracy = accuracy_score(all_labels, all_preds)\n    precision = precision_score(all_labels, all_preds, average='binary')\n    recall = recall_score(all_labels, all_preds, average='binary')\n    f1 = f1_score(all_labels, all_preds, average='binary')\n\n    print(f\"Test Accuracy: {accuracy:.4f}\")\n    print(f\"Test Precision: {precision:.4f}\")\n    print(f\"Test Recall: {recall:.4f}\")\n    print(f\"Test F1-Score: {f1:.4f}\")\n    \n    return all_labels, all_preds\n\nif __name__ == \"__main__\":\n    train_dataset = GlaucomaDataset(root_dir=TRAIN_DIR, transform=data_transforms[\"train\"])\n    test_dataset = GlaucomaDataset(root_dir=TEST_DIR, transform=data_transforms[\"val\"])\n\n    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n\n    model = get_model().to(DEVICE)\n    criterion = nn.CrossEntropyLoss()\n    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\n\n    train_model(model, train_loader, criterion, optimizer, NUM_EPOCHS)\n\n    true_labels, predicted_labels = evaluate_model(model, test_loader)\n\n    print(\"\\n--- Model Analysis ---\")\n\n    cm = confusion_matrix(true_labels, predicted_labels)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Glaucoma', 'Normal'], yticklabels=['Glaucoma', 'Normal'])\n    plt.title('Confusion Matrix')\n    plt.xlabel('Predicted Label')\n    plt.ylabel('True Label')\n    plt.show()\n\n    print(\"\\nSample of Actual vs. Predicted Labels:\")\n    for i in range(10):\n        actual_class = test_dataset.classes[true_labels[i]]\n        predicted_class = test_dataset.classes[predicted_labels[i]]\n        print(f\"Sample {i+1}: Actual: {actual_class}, Predicted: {predicted_class}\")\n\n    model_filename = \"glaucoma_vit_model.pth\"\n   \n    torch.save(model.state_dict(), model_filename)\n    print(f\"\\nModel saved to {model_filename}\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-16T17:54:56.522149Z","iopub.execute_input":"2025-08-16T17:54:56.522761Z","iopub.status.idle":"2025-08-16T17:57:58.754082Z","shell.execute_reply.started":"2025-08-16T17:54:56.522735Z","shell.execute_reply":"2025-08-16T17:57:58.753427Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ViT_B_16_Weights.IMAGENET1K_V1`. You can also use `weights=ViT_B_16_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n","output_type":"stream"},{"name":"stdout","text":"Using Vision Transformer (ViT) model: ViT-B/16\nStarting training...\nEpoch [1/20], Loss: 0.6310\nEpoch [2/20], Loss: 0.5230\nEpoch [3/20], Loss: 0.4472\nEpoch [4/20], Loss: 0.3929\nEpoch [5/20], Loss: 0.3531\nEpoch [6/20], Loss: 0.3217\nEpoch [7/20], Loss: 0.2970\nEpoch [8/20], Loss: 0.2778\nEpoch [9/20], Loss: 0.2596\nEpoch [10/20], Loss: 0.2456\nEpoch [11/20], Loss: 0.2362\nEpoch [12/20], Loss: 0.2230\nEpoch [13/20], Loss: 0.2138\nEpoch [14/20], Loss: 0.2055\nEpoch [15/20], Loss: 0.1995\nEpoch [16/20], Loss: 0.1916\nEpoch [17/20], Loss: 0.1856\nEpoch [18/20], Loss: 0.1800\nEpoch [19/20], Loss: 0.1751\nEpoch [20/20], Loss: 0.1699\nTraining finished.\nEvaluating model...\nTest Accuracy: 0.9716\nTest Precision: 0.9677\nTest Recall: 0.9677\nTest F1-Score: 0.9677\n\n--- Model Analysis ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nSample of Actual vs. Predicted Labels:\nSample 1: Actual: glaucoma, Predicted: glaucoma\nSample 2: Actual: glaucoma, Predicted: glaucoma\nSample 3: Actual: glaucoma, Predicted: glaucoma\nSample 4: Actual: glaucoma, Predicted: glaucoma\nSample 5: Actual: glaucoma, Predicted: glaucoma\nSample 6: Actual: glaucoma, Predicted: glaucoma\nSample 7: Actual: glaucoma, Predicted: glaucoma\nSample 8: Actual: glaucoma, Predicted: glaucoma\nSample 9: Actual: glaucoma, Predicted: glaucoma\nSample 10: Actual: glaucoma, Predicted: glaucoma\n\nModel saved to glaucoma_vit_model.pth\n","output_type":"stream"}],"execution_count":9}]}