{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6b62c07d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-17T15:47:47.782484Z",
     "iopub.status.busy": "2025-08-17T15:47:47.782172Z",
     "iopub.status.idle": "2025-08-17T15:50:51.134489Z",
     "shell.execute_reply": "2025-08-17T15:50:51.133492Z"
    },
    "papermill": {
     "duration": 183.357008,
     "end_time": "2025-08-17T15:50:51.135965",
     "exception": false,
     "start_time": "2025-08-17T15:47:47.778957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ViT_B_16_Weights.IMAGENET1K_V1`. You can also use `weights=ViT_B_16_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/vit_b_16-c867db91.pth\" to /root/.cache/torch/hub/checkpoints/vit_b_16-c867db91.pth\n",
      "100%|██████████| 330M/330M [00:01<00:00, 189MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Vision Transformer (ViT) model: ViT-B/16\n",
      "Starting training...\n",
      "Epoch [1/20], Loss: 0.6565\n",
      "Epoch [2/20], Loss: 0.5488\n",
      "Epoch [3/20], Loss: 0.4689\n",
      "Epoch [4/20], Loss: 0.4129\n",
      "Epoch [5/20], Loss: 0.3713\n",
      "Epoch [6/20], Loss: 0.3388\n",
      "Epoch [7/20], Loss: 0.3137\n",
      "Epoch [8/20], Loss: 0.2927\n",
      "Epoch [9/20], Loss: 0.2760\n",
      "Epoch [10/20], Loss: 0.2603\n",
      "Epoch [11/20], Loss: 0.2476\n",
      "Epoch [12/20], Loss: 0.2365\n",
      "Epoch [13/20], Loss: 0.2274\n",
      "Epoch [14/20], Loss: 0.2179\n",
      "Epoch [15/20], Loss: 0.2103\n",
      "Epoch [16/20], Loss: 0.2033\n",
      "Epoch [17/20], Loss: 0.1968\n",
      "Epoch [18/20], Loss: 0.1912\n",
      "Epoch [19/20], Loss: 0.1857\n",
      "Epoch [20/20], Loss: 0.1806\n",
      "Training finished.\n",
      "Evaluating model...\n",
      "Test Accuracy: 0.9645\n",
      "Test Precision: 0.9524\n",
      "Test Recall: 0.9677\n",
      "Test F1-Score: 0.9600\n",
      "\n",
      "--- Model Analysis ---\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sample of Actual vs. Predicted Labels:\n",
      "Sample 1: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 2: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 3: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 4: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 5: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 6: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 7: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 8: Actual: glaucoma, Predicted: normal\n",
      "Sample 9: Actual: glaucoma, Predicted: glaucoma\n",
      "Sample 10: Actual: glaucoma, Predicted: glaucoma\n",
      "\n",
      "Model saved to glaucoma_vit_model.pth\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms, models\n",
    "from PIL import Image\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n",
    "import glob\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "DATA_DIR = \"/kaggle/input/glaucoma-dataset/ACRIMA\"\n",
    "PARTITIONED_DIR = os.path.join(DATA_DIR, \"PARTITIONED\")\n",
    "TRAIN_DIR = os.path.join(PARTITIONED_DIR, \"Training\")\n",
    "TEST_DIR = os.path.join(PARTITIONED_DIR, \"Testing\")\n",
    "\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "BATCH_SIZE = 20\n",
    "LEARNING_RATE = 1e-4\n",
    "NUM_EPOCHS = 20\n",
    "IMAGE_SIZE = 224\n",
    "\n",
    "class GlaucomaDataset(Dataset):\n",
    "    def __init__(self, root_dir, transform=None):\n",
    "        self.root_dir = root_dir\n",
    "        self.transform = transform\n",
    "        self.classes = [\"glaucoma\", \"normal\"]\n",
    "        self.image_paths = []\n",
    "        self.labels = []\n",
    "\n",
    "        image_extensions = (\".jpg\", \".jpeg\", \".png\", \".bmp\", \".gif\")\n",
    "\n",
    "        for class_name in self.classes:\n",
    "            class_path = os.path.join(self.root_dir, class_name)\n",
    "            for img_path in glob.glob(os.path.join(class_path, \"*\")):\n",
    "                if img_path.lower().endswith(image_extensions):\n",
    "                    self.image_paths.append(img_path)\n",
    "                    self.labels.append(self.classes.index(class_name))\n",
    "        \n",
    "        if not self.image_paths:\n",
    "            print(f\"Warning: No images found in {root_dir} with extensions {image_extensions}.\")\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.image_paths)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        img_path = self.image_paths[idx]\n",
    "        image = Image.open(img_path).convert(\"RGB\")\n",
    "        label = self.labels[idx]\n",
    "\n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "\n",
    "        return image, label\n",
    "\n",
    "data_transforms = {\n",
    "    \"train\": transforms.Compose([\n",
    "        transforms.Resize(IMAGE_SIZE),\n",
    "        transforms.CenterCrop(IMAGE_SIZE),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "    ]),\n",
    "    \"val\": transforms.Compose([\n",
    "        transforms.Resize(IMAGE_SIZE),\n",
    "        transforms.CenterCrop(IMAGE_SIZE),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "    ])\n",
    "}\n",
    "\n",
    "def get_model():\n",
    "    model = models.vit_b_16(pretrained=True)\n",
    "    \n",
    "    for param in model.parameters():\n",
    "        param.requires_grad = False\n",
    "\n",
    "    in_features = model.heads.head.in_features\n",
    "    model.heads.head = nn.Linear(in_features, 2)\n",
    "    \n",
    "    print(\"Using Vision Transformer (ViT) model: ViT-B/16\")\n",
    "    \n",
    "    return model\n",
    "\n",
    "def train_model(model, train_loader, criterion, optimizer, num_epochs):\n",
    "    model.train()\n",
    "    print(\"Starting training...\")\n",
    "    for epoch in range(num_epochs):\n",
    "        running_loss = 0.0\n",
    "        for i, (images, labels) in enumerate(train_loader):\n",
    "            images = images.to(DEVICE)\n",
    "            labels = labels.to(DEVICE)\n",
    "\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            running_loss += loss.item() * images.size(0)\n",
    "\n",
    "        epoch_loss = running_loss / len(train_loader.dataset)\n",
    "        print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}\")\n",
    "    print(\"Training finished.\")\n",
    "\n",
    "def evaluate_model(model, test_loader):\n",
    "    model.eval()\n",
    "    print(\"Evaluating model...\")\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for images, labels in test_loader:\n",
    "            images = images.to(DEVICE)\n",
    "            labels = labels.to(DEVICE)\n",
    "            outputs = model(images)\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            \n",
    "            all_preds.extend(predicted.cpu().numpy())\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "    accuracy = accuracy_score(all_labels, all_preds)\n",
    "    precision = precision_score(all_labels, all_preds, average='binary')\n",
    "    recall = recall_score(all_labels, all_preds, average='binary')\n",
    "    f1 = f1_score(all_labels, all_preds, average='binary')\n",
    "\n",
    "    print(f\"Test Accuracy: {accuracy:.4f}\")\n",
    "    print(f\"Test Precision: {precision:.4f}\")\n",
    "    print(f\"Test Recall: {recall:.4f}\")\n",
    "    print(f\"Test F1-Score: {f1:.4f}\")\n",
    "    \n",
    "    return all_labels, all_preds\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    train_dataset = GlaucomaDataset(root_dir=TRAIN_DIR, transform=data_transforms[\"train\"])\n",
    "    test_dataset = GlaucomaDataset(root_dir=TEST_DIR, transform=data_transforms[\"val\"])\n",
    "\n",
    "    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n",
    "    test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)\n",
    "\n",
    "    model = get_model().to(DEVICE)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\n",
    "\n",
    "    train_model(model, train_loader, criterion, optimizer, NUM_EPOCHS)\n",
    "\n",
    "    true_labels, predicted_labels = evaluate_model(model, test_loader)\n",
    "\n",
    "    print(\"\\n--- Model Analysis ---\")\n",
    "\n",
    "    cm = confusion_matrix(true_labels, predicted_labels)\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Glaucoma', 'Normal'], yticklabels=['Glaucoma', 'Normal'])\n",
    "    plt.title('Confusion Matrix')\n",
    "    plt.xlabel('Predicted Label')\n",
    "    plt.ylabel('True Label')\n",
    "    plt.show()\n",
    "\n",
    "    print(\"\\nSample of Actual vs. Predicted Labels:\")\n",
    "    for i in range(10):\n",
    "        actual_class = test_dataset.classes[true_labels[i]]\n",
    "        predicted_class = test_dataset.classes[predicted_labels[i]]\n",
    "        print(f\"Sample {i+1}: Actual: {actual_class}, Predicted: {predicted_class}\")\n",
    "\n",
    "    model_filename = \"glaucoma_vit_model.pth\"\n",
    "   \n",
    "    torch.save(model.state_dict(), model_filename)\n",
    "    print(f\"\\nModel saved to {model_filename}\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 8081235,
     "sourceId": 12782274,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 190.449342,
   "end_time": "2025-08-17T15:50:53.671833",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-17T15:47:43.222491",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
